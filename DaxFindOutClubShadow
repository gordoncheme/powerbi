Chapter 7 Iterators and CALCULATE
-[Gordon] table is evaluated before; iterator is evaluated in row context of the expression.  Some functions without '%X' are also iterators; see '!resources'
-[Gordon] iterator cardinality - the number of rows being iterated. Depends on # rows in tables, inner/outer, relationships, measures in other measures; can be combinatorial or if written better, only be the cardinality of the inner table. Avoid nested iterators if cardinality of outer iterators is very large
-[Gordon] nested iterations with measures leverages the implicit CALCULATE in measures to do context transition
-[Gordon] avoid measure references in large iterators
-[Gordon] Iterator equirements: (1) define granularity (2) define expression to evaluate @ granularity (3) kind of aggregation
-[Gordon] Trick: use CONCATENATEX to return a string of the selected dimensions: CONCATENATEX(VALUES([dimension]),[dimension],[delimiter],[dimension for order], [order direction])
-[Gordon] ADDCOLUMNS() to create return table with all of the columns of the table expression it iterates; SELECTCOLUMNS() to reduce # columns of a table
-[Gordon] AVERAGEX() for moving averages; blanks are skipped! Can also use DIVIDE([total to use], [count of periods])
-[Gordon] RANKX() (1) lookup table iterated over first parameter, sorted lookup table of values (2) evaluate 2nd parameter in OG eval context (3) Position of value in 2nd step based on lookup table from 1st step.  Wrap in HASONEVALUE() to not show totals.  Use 1st and 3rd param for lookup table (1st) and value to rank (2nd). 4th param to set the order. 5th param to handle ties (DENSE, SKIP).  Use ALL() or ALLEXCEPT() for lookup table to ensure all are included either without filters or with them, depending on desired result
-[Gordon] can iterate over higher levels of granularity, e.g. checking or quantity of something at the month level and dividing total by that count. Watch totals, that the LOD is proper (e.g. includes year and month)

Chapter 8 Time Intelligence
-[Gordon] book recommends pbix "auto date/time" off so that new shadow table not created for every date in the model
-[Gordon] a way to make a date table is to filter CALENDARAUTO to applicable date range, then ADDCOLUMNS for other date dimensions.  See page 223
-[Gordon] with multiple dates (1) one date table w/ multiple relationships (2) one date table for each.  Go with (1) unless want to matricize different dates, then use (2).  Use Calc Groups to reduce measure count using (1)
-[Gordon] got to understand the hard way to do date calcs because DAX doesn't have built in ways to do everything
-[Gordon] Order of Ops: (1) determine new filter for the date (2) apply new filter context before computing the measure
-[Gordon] DAX automatically adds ALL() to table.Dates when filter is applied to type.Date or type.DateTime column.  MARK AS DATE TABLE TO ENABLE THIS. WORKS EVEN IF RELATIONSHIP USES [datekey] TYPE COLUMN
-[Gordon] All time intelligence functions in DAX apply a filter condition on the date column of a table.Dates
-[Gordon] menagerie of functions, DATESYTD etc.  book prefers CALCULATE(<expression>,DATEADD([date],-1,<interval>)) to SAMEPERIODLASTYEAR due to flexibility
-[Gordon] can nest time intelligence functions.  e.g., YTD for least year. Be mindful of table.dates limits, and impacts of nesting calcs.  otherwise, can return empty table equivalent to blank scalar
-[Gordon] Moving Annual Total (MAT) --> DATESINPERIOD()
-[Gordon] semi-additive values use different types of aggregations when sliced by different columns (e.g., Sum & last date like a bank account balance)
  --DETAILS!  LASTDATE() returns the last date in the date table, always.  use LASTNONBLANK('date'[Date],COUNTROWS(RELATEDTABLE(<fact table>))) to get the last date
  --e.g., different last dates, either the last date with any data applies to all, or each last date is unique.  To aggregate in the latter case, iterate on the unique dimension (e.g., customer)
-[Gordon] opening and closing balances suffer from same LASTDATE() issues.  LASTNONBLANK solution from above is recommended
-[Gordon] Context transition for time intelligence functions occurs only when a date column is specified as a column reference
-[Gordon] for DATEADD(), the table.Dates should have complete years
--(1) DATEADD only returns days that exist in the date column
--(2) if a day does not exist in the corresponding month afer the shifting operation, then the result of DATEADD includes the last day of the corresponding month
--(3) If the selection includes the last two days of a month, then the result of DATEADD includes all the dateys between the days in the shifted month and the end of the shifted month
--Watch out for weekdays and DATEADD
-[Gordon] FIRSTDATE/LASTDATE: return table and perform context transition. LASTNONBLANK/FIRSTNONBLANK: iterators and return first/last scalar parameter is not a blank
-[Gordon] Drill Through --> use CALCULATETABLE () because dt only considers filter context from rows, columns, filters, slices and NOT by the measure itself

Chapter 9 Calculation Groups
-[Gordon] Bottom line - define calculation items in calculation groups to apply the same transformation steps to different data items
-[Gordon] Tabular Editor a way to create Calc Groups, which is a special kind of table with a shown column (e.g., [Formula]) and a hidden column (e.g., [Ordinal]), and a folder with the items in tab editor
--Give the group (table) a name
--Name the Calc Item per the transformation
--DAX expression replaces the measure in the report when you apply the calc item
--Use SELECTEDMEASURE() in place of the specified measure when defining the calc item
--Sideways recursion (referencing a calc item) not recommended
--calc items sit in a column of the calc groups table 
-[Gordon] Place the measure in the values of the matrix and the calc item column on columns to get report
-[Gordon] good idea to have a "Current" calc item in the calc group to show the current value with the other calculations
-[Gordon] Sort Order by arranging the calc items in tab editor, which sets the Ordinal and the sort order
-[Gordon] formatting --> there is a format string property available for the calc item. A calculation item can override both the calculation logic and format of a measure
-[Gordon] Best practices (1) use CG's to modify the behavior of expressions consisting of one measure only (2) Avoid using sideways recursion that users can get to, and be cautious in general so that full recursion doesn't happen which causes errors

Chapter 10 Working with filter context
-[Gordon] check for formulas for filter context compatibility 
-[Gordon] HASONEVALUE(), SELECTEDVALUE()
-[Gordon] A column is cross-filtered if there is a filter that may reduce its set of visible values, either or a direct or indirect filter. ISCROSSFILTERED().  Filtered = Crossfiltered (column), but Crossfiltered <>always Filtered (column).  Use ISCROSSFILTERED() with a table
-[Gordon] VALUES() returns the values visible in the filter context
-[Gordon] FILTERS() returns the values that are currently being filtered by the filter context.  Didn't work in power bi with SUMMARIZECOLUMNS(), but may work now. HASONEFILTER()
-[Gordon] Check for full visibility with a row count. ALL([filter column]) - only works for that column - or ALLEXCEPT([Grouping column]) - only works if that column is grouping and is a filter that can be retained. ALLEXCEPT alternative - CALCULATE([Measure], ALL ('table'), VALUES([Grouping Column])). VALUES() will work when [Grouping column] is cross filtered
-[Gordon] ALL* functions only remove filters, not add
-[Gordon] ALL* as calc modifier to avoid CT because calc modifiers applied after CT. Use in calc columns for totals (e.g., denominators)
-[Gordon] ISEMPTY() to determine if a table has no values visible in the current filter context
-[Gordon] Data Lineage on table columns, not in expressions. TREATAS to apply data lineage to anonymous table: TREATAS('table', [column1withlineage], [column2withlineage], ...)
-[Gordon] An Arbitrarily Shaped Filter is any filter that cannot be expressed as a simple filter (which is a set of column filters); can be done through code or through (hierarchy) slicers. Watch for calculate killing the original shape of the arbitrary filter.  Use iterated columns that don't do that (e.g., [MonthYear] not [Month]), or use KEEPFILTERS() to keep the arbitrary. 

Chapter 11 Handling hierarchies
-[Gordon] In a single measure for PctOfParent, IF statements (e.g., HASONEVALUE() )should proceed from inner to outer
-[Gordon] PATH() function. PATH(<ID_columnName>, <parent_columnName>); Returns a delimited text string with the identifiers of all the parents of the current identifier, starting with the oldest and continuing until current.
--Use with PATHITEM () to return the Item in the hierarchy at different levels.  PATHITEM(<path>, <position>[, <type>]); Returns the item at the specified position from a string resulting from evaluation of a PATH function. Positions are counted from left to right.
-[Gordon] Use PATHLENGTH(<path>); Returns the number of parents to the specified item in a given PATH result, including self; to clear blanks from different levels in hierarchy table.  See pg 354 in DAX book.  aka [NodeDepth]
-[Gordon] Combine [NodeDepth] with [BrowseDepth] (SUM(ISINSCOPE()) across all levels) to define a measure that blanks out values for levels that are too deep for the object
-[Gordon] Find Leaves (objects w/no children), and implement a measure that shows the value of the object itself nested in its hierarchy.  See pp 360-361.  Hide Members to hide blank members, in tabular editor, but could not find
-[Gordon] INFO: Unary operators in DAX hierarchies define how each child member contributes to its parent’s total—typically using symbols like + (add child value to parent), - (subtract child value from parent), or ~ (do not include child in parent total) to indicate addition, subtraction, or exclusion from aggregation.

Chapter 12 Working with Tables
-[Gordon] CALCULATETABLE(<table>, <filter1>, <filter2>, ...) | FILTER does not change the filter context, where CALCULATETABLE does
--CALCULATETABLE (1) changes filter context (2) evaluate expression
--FILTER (1) iterates over first argument retrieving only the rows that meet the condition
-[Gordon] CALCULATETABLE can only apply fi lters to columns that belong to the data model; FILTER can filter on a measure
-[

