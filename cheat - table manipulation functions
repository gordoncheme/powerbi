6 SUMMARIZE(<table>, <groupBy_columnName>[, <groupBy_columnName>]…[, <name>, <expression>]…)
 Returns a summary table for the requested totals over a set of groups. It scans a table (its fi rst argument),
GROUPING columns of the same or other related tables in groups of one or more.F
6 DISTINCT(<table>) Returns a table by removing duplicate rows from another table or 
expressionF
6 ADDCOLUMNS(<table>, <name>, <expression>[, <name>, <expression>]…) Adds calculated columns to the given table or table expression. returns all the rows and columns of its fi rst argument, adding newly created columns to the output.
6 SELECTCOLUMNS(<table>, <name>, <expression>[, <name>, <expression>]…) Selects columns from the given table or table expressionF
6 GROUPBY(<table> [, <groupBy_columnName>[, [<column_name>] [<expression>]]…) Create a summary of the input table grouped by specific columnsF
6 INTERSECT(<left_table>, <right_table>) Returns the rows of the left-side table that appear in the right-side table.  Maintains lineage of left-side table
6 NATURALINNERJOIN(<left_table>, <right_table>) Joins two tables using an inner joinF
6 NATURALLEFTOUTERJOIN(<left_table>, <right_table>) Joins two tables using a left outer joinF
6 UNION(<table>, <table>[, <table> [,…]]) Returns the union of tables with matching columns. Maintains data lineage of input tables if lineage of both tables is the same, otherwise no lineage
6 EXCEPT(<table_expression1>, <table_expression2>) Returns a table that contains the rows of one table (1) minus all the rows of another table (2). EXCEPT removes the rows present in the second table from the first table, and uses the lineage of the first table
6 CALCULATETABLE(<expression>[, <filter1> [, <filter2> [, …]]]) Evaluates a table expression in a modified filter context.
6 CROSSJOIN(<table>, <table>[, <table>]…) Returns a table that contains the Cartesian product of all rows from all tables in the arguments. The columns in the new table are all the columns in all the argument tables.
6 DETAILROWS([Measure]) Evaluates a Detail Rows Expression defined for a measure and returns the data. Returns A table with the data returned by the Detail Rows Expression. If no Detail Rows Expression is defined, the data for the table containing the measure is returned. Executed in the filter context of a measure. "invokes a table expression stored in a measure"
6 ROW(<name>, <expression>[, <name>, <expression>]…) create a single row of data with specified column names and values. It is particularly useful when you need to create a table with a single row for calculations or testing purposes.
6 DATATABLE(ColumnName1, DataType1, ColumnName2, DataType2, ..., { {Value1, Value2, ...}, {Value1, Value2, ...}, ... }). create a static table directly within your Power BI model. This is particularly useful for creating small reference tables or lookup tables without needing to import data from an external source.
6 GENERATESERIES(<StartValue>, <EndValue>[, <IncrementValue>]) create a single-column table containing a series of values. It is particularly useful for generating sequences of numbers, which can be used for calculations, visualizations, or as a reference table. output format depends on input format.  e.g., TIME

6 LINEAGE
   Function	Description	Lineage Behavior
   ADDCOLUMNS()	Adds calculated columns to a table.	New columns have new lineage.
   SUMMARIZE()	Groups data by specified columns and optionally adds aggregations.	Grouping columns retain lineage; aggregation columns have new lineage.
   SUMMARIZECOLUMNS() Groups data and applies filters; optimized for use in measures and visuals. Grouping columns retain linage; calculated columns have new lineage.
   CROSSJOIN()	Returns the Cartesian product of two or more tables.	Lineage is preserved for original columns.
   UNION()	Returns a table that is the union of two tables (duplicates removed).	Lineage is preserved if columns are directly passed; otherwise, new lineage may be introduced.
   INTERSECT()	Returns a table with rows common to both tables.	Same as UNION()—depends on how columns are constructed.
   EXCEPT()	Returns a table with rows from the first table that do not appear in the second.	Uses the lineage of the first table.
   SELECTCOLUMNS()	Returns a table with selected columns and optional expressions.	Direct references retain lineage; computed/renamed columns get new lineage.
   ROW()	Returns a single-row table with specified columns and values.	All columns have new lineage.
   DATATABLE()	Returns a static table defined inline with specified data types.	All columns have new lineage.
   GENERATESERIES()	Returns a single-column table of values from start to end with a specified increment.	Column has new lineage.
   CALCULATETABLE()	Evaluates a table expression in a modified filter context.	Depends on the inner expression; lineage follows the source table.
   
   # Quick Notes on “New Lineage”
   - New lineage = column is not tied to model relationships.
   - Filters on model columns won’t affect new-lineage columns.
   - Can break CALCULATE, filters, or relationships.
   
   # Fixing Lineage with TREATAS()
   - Use TREATAS(<table>, <model_column>) to assign lineage.
   - Enables filter propagation and relationship behavior.

6 [next entry]
