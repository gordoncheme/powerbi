//Note that calculated columns do not allow variant data types.  To return text in one case, the other must return text.  This amounts to formatting numbers and dates as strings to also show "current" or "latest" based on condition.

//001
//Relative date filter for current year.
//!DAX
//!CalcColumn
YearFilter = IF(YEAR(dimFinishDate[date]) = YEAR(TODAY()),"Current",CONVERT(YEAR(dimFinishDate[Date]),STRING))

//002
//Latest Date (price, entry, etc) filter
//!DAX
//!CalcColumn
//It is best to first have a dimension date table for the date
//it is recommended to have a card visual next to the slicer that uses this calculated column to display what "latest" is
Date for filter = 
VAR _MaxDate = MAX (MPRVolEffDates[EffectiveStartDate])
RETURN
    IF(
        MPRVolEffDates[EffectiveStartDate] = _MaxDate,
        "Latest",
        FORMAT(MPRVolEffDates[EffectiveStartDate],"mm/dd/yyyy")
    )

//003
//LAST-REFRESH shown on the dashboard
//!M-Code
//!Transform Data
//    New Source
//        Blank Query
= DateTime.LocalNow()
//"Transform" contextual menu >>> "To Table"
//Applied Step - Rename Column:  "Last Refresh"
//Applied Step - Change Type:  datetime

//004
//Relative Months - Mcode + DAX
//!M-Code w/ DAX
//!M-Code table with DAX columns
//Use M-Code to make the initial relative months table; Use DAX to add some columns
//See 005 for all DAX, date table
//M-Code
let
    Source = Sql.Database("ref-mc1-shared-prd-1-sqmi.ce994f3dcc4b.database.windows.net", "Refining_OLAP", [Query="WITH RelativeDateCTE AS (#(lf)   SELECT YEAR(DATEADD(MONTH, -1, GETDATE())) AS Year, MONTH(DATEADD(MONTH, -1, GETDATE())) AS Month,-2 AS RelativeMonth#(lf)   UNION ALL#(lf)   SELECT YEAR(GETDATE()), MONTH(GETDATE()), -1#(lf)--use (-1) because 0 return all of the blank months in the relationship when used in viz#(lf)    UNION ALL#(lf)    SELECT YEAR(DATEADD(MONTH, 1, GETDATE())), MONTH(DATEADD(MONTH, 1, GETDATE())), 1#(lf)    UNION ALL#(lf)    SELECT YEAR(DATEADD(MONTH, 2, GETDATE())), MONTH(DATEADD(MONTH, 2, GETDATE())), 2#(lf)#(tab)UNION ALL#(lf)    SELECT YEAR(DATEADD(MONTH, 3, GETDATE())), MONTH(DATEADD(MONTH, 3, GETDATE())), 3#(lf))#(lf)SELECT * FROM RelativeDateCTE;"]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Year", type text}, {"Month", type text}, {"RelativeMonth", type text}}),
    #"Added Custom" = Table.AddColumn(#"Changed Type", "DateYrMonth", each [Year]&[Month]),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added Custom",{{"Year", Int64.Type}, {"Month", Int64.Type}, {"RelativeMonth", Int64.Type}})
in
    #"Changed Type1"
//DAX Calculated Columns
MonthDAX = FORMAT(DATE(dimRelative_Months[Year],dimRelative_Months[Month],1), "mm")
DateYrMonthDAX = dimRelative_Months[Year]&dimRelative_Months[MonthDAX]
RelativeMonthDAX = 
    VAR ReferenceYear=year(TODAY())
    VAR ReferenceMonth=MONTH(TODAY())
    VAR CurrentYear= [Year]
    VAR CurrentMonth= [Month]
    VAR res=((CurrentYear-ReferenceYear)*12)+(CurrentMonth-ReferenceMonth)+1
    return res
MonthDisplay = FORMAT(DATE(dimRelative_Months[Year],dimRelative_Months[Month],1), "mmm-yy")
//Use RelativeMonthDAX as the slicer 

//005
//Relative Months Date Table - DAX
//DAX
//!DAX table with DAX columns
//Make the table, then add the columns
_Date Tables = CALENDAR(EOMONTH(today(),-2)+1, EOMONTH(today(),3))
MMM YYYY = FORMAT('_Date Tables'[Date],"MMM-YY")
YYYYMM = FORMAT('_Date Tables'[Date],"YYYYMM")
Year = year('_Date Tables'[Date])
Month = MONTH('_Date Tables'[Date])
RelativeMonth = 
    VAR ReferenceYear=year(TODAY())
    VAR ReferenceMonth=MONTH(TODAY())
    VAR CurrentYear= YEAR([Date])
    VAR CurrentMonth=MONTH([Date])
    VAR res=((CurrentYear-ReferenceYear)*12)+(CurrentMonth-ReferenceMonth)+1
    return res
//Connect to primary Date table on [Date]
//Use RelativeMonthDAX as the slicer 
